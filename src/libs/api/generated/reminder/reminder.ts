/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  UpdateReminderDto
} from '.././models';

import { apiClientFactory } from '../../factories/apiClientFactory';




export const update = (
    id: string,
    updateReminderDto: UpdateReminderDto,
 ) => {
      
      
      return apiClientFactory<void>(
      {url: `/reminder/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateReminderDto
    },
      );
    }
  


export const getUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateReminderDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateReminderDto}, TContext> => {

const mutationKey = ['update'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof update>>, {id: string;data: UpdateReminderDto}> = (props) => {
          const {id,data} = props ?? {};

          return  update(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMutationResult = NonNullable<Awaited<ReturnType<typeof update>>>
    export type UpdateMutationBody = UpdateReminderDto
    export type UpdateMutationError = unknown

    export const useUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateReminderDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof update>>,
        TError,
        {id: string;data: UpdateReminderDto},
        TContext
      > => {

      const mutationOptions = getUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    