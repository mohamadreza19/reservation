/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { apiClientFactory } from '../../factories/apiClientFactory';




/**
 * @summary Delete a price
 */
export const remove = (
    id: string,
 ) => {
      
      
      return apiClientFactory<void>(
      {url: `/prices/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getRemoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remove>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof remove>>, TError,{id: string}, TContext> => {

const mutationKey = ['remove'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof remove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  remove(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveMutationResult = NonNullable<Awaited<ReturnType<typeof remove>>>
    
    export type RemoveMutationError = unknown

    /**
 * @summary Delete a price
 */
export const useRemove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remove>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof remove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get the price for a service
 */
export const findByService = (
    serviceId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/prices/service/${serviceId}`, method: 'GET', signal
    },
      );
    }
  

export const getFindByServiceQueryKey = (serviceId: string,) => {
    return [`/prices/service/${serviceId}`] as const;
    }

    
export const getFindByServiceInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(serviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByServiceQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByService>>> = ({ signal }) => findByService(serviceId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByServiceInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByService>>>
export type FindByServiceInfiniteQueryError = unknown


export function useFindByServiceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(
 serviceId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByService>>,
          TError,
          Awaited<ReturnType<typeof findByService>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByServiceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByService>>,
          TError,
          Awaited<ReturnType<typeof findByService>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByServiceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the price for a service
 */

export function useFindByServiceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByServiceInfiniteQueryOptions(serviceId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByServiceQueryOptions = <TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(serviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByServiceQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByService>>> = ({ signal }) => findByService(serviceId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByServiceQueryResult = NonNullable<Awaited<ReturnType<typeof findByService>>>
export type FindByServiceQueryError = unknown


export function useFindByService<TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(
 serviceId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByService>>,
          TError,
          Awaited<ReturnType<typeof findByService>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByService<TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByService>>,
          TError,
          Awaited<ReturnType<typeof findByService>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByService<TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the price for a service
 */

export function useFindByService<TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByServiceQueryOptions(serviceId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



