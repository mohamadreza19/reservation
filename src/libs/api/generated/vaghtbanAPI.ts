/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  OtpRequestDto,
  UpdateScheduleDto,
  VerifyOtpDto
} from './models';

import { apiClientFactory } from '../factories/apiClientFactory';




export const create = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/timeslots`, method: 'POST', signal
    },
      );
    }
  


export const getCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof create>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof create>>, TError,void, TContext> => {

const mutationKey = ['create'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof create>>, void> = () => {
          

          return  create()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMutationResult = NonNullable<Awaited<ReturnType<typeof create>>>
    
    export type CreateMutationError = unknown

    export const useCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof create>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof create>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const findAll = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/user`, method: 'GET', signal
    },
      );
    }
  

export const getFindAllQueryKey = () => {
    return [`/user`] as const;
    }

    
export const getFindAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findAll>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAll>>> = ({ signal }) => findAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAll>>>
export type FindAllInfiniteQueryError = unknown


export function useFindAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAll>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAll>>,
          TError,
          Awaited<ReturnType<typeof findAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAll>>,
          TError,
          Awaited<ReturnType<typeof findAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllQueryOptions = <TData = Awaited<ReturnType<typeof findAll>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAll>>> = ({ signal }) => findAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllQueryResult = NonNullable<Awaited<ReturnType<typeof findAll>>>
export type FindAllQueryError = unknown


export function useFindAll<TData = Awaited<ReturnType<typeof findAll>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAll>>,
          TError,
          Awaited<ReturnType<typeof findAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAll<TData = Awaited<ReturnType<typeof findAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAll>>,
          TError,
          Awaited<ReturnType<typeof findAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAll<TData = Awaited<ReturnType<typeof findAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAll<TData = Awaited<ReturnType<typeof findAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findOne = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/user/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getFindOneQueryKey = (id: string,) => {
    return [`/user/${id}`] as const;
    }

    
export const getFindOneInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findOne>>>, TError = unknown>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findOne>>> = ({ signal }) => findOne(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findOne>>>
export type FindOneInfiniteQueryError = unknown


export function useFindOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findOne>>>, TError = unknown>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findOne>>,
          TError,
          Awaited<ReturnType<typeof findOne>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findOne>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findOne>>,
          TError,
          Awaited<ReturnType<typeof findOne>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findOne>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findOne>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindOneInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindOneQueryOptions = <TData = Awaited<ReturnType<typeof findOne>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findOne>>> = ({ signal }) => findOne(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindOneQueryResult = NonNullable<Awaited<ReturnType<typeof findOne>>>
export type FindOneQueryError = unknown


export function useFindOne<TData = Awaited<ReturnType<typeof findOne>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findOne>>,
          TError,
          Awaited<ReturnType<typeof findOne>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindOne<TData = Awaited<ReturnType<typeof findOne>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findOne>>,
          TError,
          Awaited<ReturnType<typeof findOne>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindOne<TData = Awaited<ReturnType<typeof findOne>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindOne<TData = Awaited<ReturnType<typeof findOne>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOne>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a schedule
 */
export const update = (
    id: string,
    updateScheduleDto: UpdateScheduleDto,
 ) => {
      
      
      return apiClientFactory<void>(
      {url: `/schedules/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateScheduleDto
    },
      );
    }
  


export const getUpdateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateScheduleDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateScheduleDto}, TContext> => {

const mutationKey = ['update'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof update>>, {id: string;data: UpdateScheduleDto}> = (props) => {
          const {id,data} = props ?? {};

          return  update(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMutationResult = NonNullable<Awaited<ReturnType<typeof update>>>
    export type UpdateMutationBody = UpdateScheduleDto
    export type UpdateMutationError = void

    /**
 * @summary Update a schedule
 */
export const useUpdate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateScheduleDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof update>>,
        TError,
        {id: string;data: UpdateScheduleDto},
        TContext
      > => {

      const mutationOptions = getUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete a price
 */
export const remove = (
    id: string,
 ) => {
      
      
      return apiClientFactory<void>(
      {url: `/prices/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getRemoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remove>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof remove>>, TError,{id: string}, TContext> => {

const mutationKey = ['remove'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof remove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  remove(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveMutationResult = NonNullable<Awaited<ReturnType<typeof remove>>>
    
    export type RemoveMutationError = unknown

    /**
 * @summary Delete a price
 */
export const useRemove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remove>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof remove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getAll = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/timeslots`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllQueryKey = () => {
    return [`/timeslots`] as const;
    }

    
export const getGetAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll>>> = ({ signal }) => getAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAll>>>
export type GetAllInfiniteQueryError = unknown


export function useGetAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAll>>,
          TError,
          Awaited<ReturnType<typeof getAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAll>>,
          TError,
          Awaited<ReturnType<typeof getAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllQueryOptions = <TData = Awaited<ReturnType<typeof getAll>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll>>> = ({ signal }) => getAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllQueryResult = NonNullable<Awaited<ReturnType<typeof getAll>>>
export type GetAllQueryError = unknown


export function useGetAll<TData = Awaited<ReturnType<typeof getAll>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAll>>,
          TError,
          Awaited<ReturnType<typeof getAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll<TData = Awaited<ReturnType<typeof getAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAll>>,
          TError,
          Awaited<ReturnType<typeof getAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAll<TData = Awaited<ReturnType<typeof getAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAll<TData = Awaited<ReturnType<typeof getAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getOne = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/business/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetOneQueryKey = (id: string,) => {
    return [`/business/${id}`] as const;
    }

    
export const getGetOneInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getOne>>>, TError = unknown>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOne>>> = ({ signal }) => getOne(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getOne>>>
export type GetOneInfiniteQueryError = unknown


export function useGetOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getOne>>>, TError = unknown>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOne>>,
          TError,
          Awaited<ReturnType<typeof getOne>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getOne>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOne>>,
          TError,
          Awaited<ReturnType<typeof getOne>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getOne>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getOne>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOneInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetOneQueryOptions = <TData = Awaited<ReturnType<typeof getOne>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOne>>> = ({ signal }) => getOne(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneQueryResult = NonNullable<Awaited<ReturnType<typeof getOne>>>
export type GetOneQueryError = unknown


export function useGetOne<TData = Awaited<ReturnType<typeof getOne>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOne>>,
          TError,
          Awaited<ReturnType<typeof getOne>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOne<TData = Awaited<ReturnType<typeof getOne>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOne>>,
          TError,
          Awaited<ReturnType<typeof getOne>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOne<TData = Awaited<ReturnType<typeof getOne>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetOne<TData = Awaited<ReturnType<typeof getOne>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOne>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all employees for a specific business
 */
export const findAllForBusiness = (
    businessId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/employee/business/${businessId}`, method: 'GET', signal
    },
      );
    }
  

export const getFindAllForBusinessQueryKey = (businessId: string,) => {
    return [`/employee/business/${businessId}`] as const;
    }

    
export const getFindAllForBusinessInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllForBusinessQueryKey(businessId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllForBusiness>>> = ({ signal }) => findAllForBusiness(businessId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(businessId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllForBusinessInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllForBusiness>>>
export type FindAllForBusinessInfiniteQueryError = unknown


export function useFindAllForBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(
 businessId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllForBusiness>>,
          TError,
          Awaited<ReturnType<typeof findAllForBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllForBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllForBusiness>>,
          TError,
          Awaited<ReturnType<typeof findAllForBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllForBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all employees for a specific business
 */

export function useFindAllForBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllForBusinessInfiniteQueryOptions(businessId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllForBusinessQueryOptions = <TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllForBusinessQueryKey(businessId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllForBusiness>>> = ({ signal }) => findAllForBusiness(businessId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(businessId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllForBusinessQueryResult = NonNullable<Awaited<ReturnType<typeof findAllForBusiness>>>
export type FindAllForBusinessQueryError = unknown


export function useFindAllForBusiness<TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(
 businessId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllForBusiness>>,
          TError,
          Awaited<ReturnType<typeof findAllForBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllForBusiness<TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllForBusiness>>,
          TError,
          Awaited<ReturnType<typeof findAllForBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllForBusiness<TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all employees for a specific business
 */

export function useFindAllForBusiness<TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllForBusinessQueryOptions(businessId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get services by business ID
 */
export const findByBusiness = (
    businessId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/services/business/${businessId}`, method: 'GET', signal
    },
      );
    }
  

export const getFindByBusinessQueryKey = (businessId: string,) => {
    return [`/services/business/${businessId}`] as const;
    }

    
export const getFindByBusinessInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByBusiness>>>, TError = void>(businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByBusinessQueryKey(businessId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByBusiness>>> = ({ signal }) => findByBusiness(businessId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(businessId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByBusinessInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByBusiness>>>
export type FindByBusinessInfiniteQueryError = void


export function useFindByBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByBusiness>>>, TError = void>(
 businessId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByBusiness>>,
          TError,
          Awaited<ReturnType<typeof findByBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByBusiness>>>, TError = void>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByBusiness>>,
          TError,
          Awaited<ReturnType<typeof findByBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByBusiness>>>, TError = void>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get services by business ID
 */

export function useFindByBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByBusiness>>>, TError = void>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByBusinessInfiniteQueryOptions(businessId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByBusinessQueryOptions = <TData = Awaited<ReturnType<typeof findByBusiness>>, TError = void>(businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByBusinessQueryKey(businessId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByBusiness>>> = ({ signal }) => findByBusiness(businessId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(businessId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByBusinessQueryResult = NonNullable<Awaited<ReturnType<typeof findByBusiness>>>
export type FindByBusinessQueryError = void


export function useFindByBusiness<TData = Awaited<ReturnType<typeof findByBusiness>>, TError = void>(
 businessId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByBusiness>>,
          TError,
          Awaited<ReturnType<typeof findByBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByBusiness<TData = Awaited<ReturnType<typeof findByBusiness>>, TError = void>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByBusiness>>,
          TError,
          Awaited<ReturnType<typeof findByBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByBusiness<TData = Awaited<ReturnType<typeof findByBusiness>>, TError = void>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get services by business ID
 */

export function useFindByBusiness<TData = Awaited<ReturnType<typeof findByBusiness>>, TError = void>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByBusinessQueryOptions(businessId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const sendOTP = (
    otpRequestDto: OtpRequestDto,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/auth/send-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: otpRequestDto, signal
    },
      );
    }
  


export const getSendOTPMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendOTP>>, TError,{data: OtpRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof sendOTP>>, TError,{data: OtpRequestDto}, TContext> => {

const mutationKey = ['sendOTP'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendOTP>>, {data: OtpRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  sendOTP(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendOTPMutationResult = NonNullable<Awaited<ReturnType<typeof sendOTP>>>
    export type SendOTPMutationBody = OtpRequestDto
    export type SendOTPMutationError = unknown

    export const useSendOTP = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendOTP>>, TError,{data: OtpRequestDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sendOTP>>,
        TError,
        {data: OtpRequestDto},
        TContext
      > => {

      const mutationOptions = getSendOTPMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const verifyOTP = (
    verifyOtpDto: VerifyOtpDto,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/auth/verify-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyOtpDto, signal
    },
      );
    }
  


export const getVerifyOTPMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyOTP>>, TError,{data: VerifyOtpDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof verifyOTP>>, TError,{data: VerifyOtpDto}, TContext> => {

const mutationKey = ['verifyOTP'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyOTP>>, {data: VerifyOtpDto}> = (props) => {
          const {data} = props ?? {};

          return  verifyOTP(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyOTPMutationResult = NonNullable<Awaited<ReturnType<typeof verifyOTP>>>
    export type VerifyOTPMutationBody = VerifyOtpDto
    export type VerifyOTPMutationError = unknown

    export const useVerifyOTP = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyOTP>>, TError,{data: VerifyOtpDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof verifyOTP>>,
        TError,
        {data: VerifyOtpDto},
        TContext
      > => {

      const mutationOptions = getVerifyOTPMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get the price for a service
 */
export const findByService = (
    serviceId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/prices/service/${serviceId}`, method: 'GET', signal
    },
      );
    }
  

export const getFindByServiceQueryKey = (serviceId: string,) => {
    return [`/prices/service/${serviceId}`] as const;
    }

    
export const getFindByServiceInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(serviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByServiceQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByService>>> = ({ signal }) => findByService(serviceId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByServiceInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByService>>>
export type FindByServiceInfiniteQueryError = unknown


export function useFindByServiceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(
 serviceId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByService>>,
          TError,
          Awaited<ReturnType<typeof findByService>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByServiceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByService>>,
          TError,
          Awaited<ReturnType<typeof findByService>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByServiceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the price for a service
 */

export function useFindByServiceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByService>>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByServiceInfiniteQueryOptions(serviceId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByServiceQueryOptions = <TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(serviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByServiceQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByService>>> = ({ signal }) => findByService(serviceId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByServiceQueryResult = NonNullable<Awaited<ReturnType<typeof findByService>>>
export type FindByServiceQueryError = unknown


export function useFindByService<TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(
 serviceId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByService>>,
          TError,
          Awaited<ReturnType<typeof findByService>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByService<TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByService>>,
          TError,
          Awaited<ReturnType<typeof findByService>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByService<TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the price for a service
 */

export function useFindByService<TData = Awaited<ReturnType<typeof findByService>>, TError = unknown>(
 serviceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByService>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByServiceQueryOptions(serviceId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const initiate = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/schedules/initiate-schedules`, method: 'POST', signal
    },
      );
    }
  


export const getInitiateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initiate>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof initiate>>, TError,void, TContext> => {

const mutationKey = ['initiate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initiate>>, void> = () => {
          

          return  initiate()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InitiateMutationResult = NonNullable<Awaited<ReturnType<typeof initiate>>>
    
    export type InitiateMutationError = unknown

    export const useInitiate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initiate>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof initiate>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getInitiateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get all schedules for the business
 */
export const getSchedules = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/schedules`, method: 'GET', signal
    },
      );
    }
  

export const getGetSchedulesQueryKey = () => {
    return [`/schedules`] as const;
    }

    
export const getGetSchedulesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSchedules>>>, TError = void>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSchedulesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedules>>> = ({ signal }) => getSchedules(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSchedulesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedules>>>
export type GetSchedulesInfiniteQueryError = void


export function useGetSchedulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSchedules>>>, TError = void>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedules>>,
          TError,
          Awaited<ReturnType<typeof getSchedules>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSchedulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSchedules>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedules>>,
          TError,
          Awaited<ReturnType<typeof getSchedules>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSchedulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSchedules>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all schedules for the business
 */

export function useGetSchedulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSchedules>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSchedulesInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSchedulesQueryOptions = <TData = Awaited<ReturnType<typeof getSchedules>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSchedulesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedules>>> = ({ signal }) => getSchedules(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSchedulesQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedules>>>
export type GetSchedulesQueryError = void


export function useGetSchedules<TData = Awaited<ReturnType<typeof getSchedules>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedules>>,
          TError,
          Awaited<ReturnType<typeof getSchedules>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSchedules<TData = Awaited<ReturnType<typeof getSchedules>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedules>>,
          TError,
          Awaited<ReturnType<typeof getSchedules>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSchedules<TData = Awaited<ReturnType<typeof getSchedules>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all schedules for the business
 */

export function useGetSchedules<TData = Awaited<ReturnType<typeof getSchedules>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSchedulesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteAll = (
    
 ) => {
      
      
      return apiClientFactory<void>(
      {url: `/timeslots`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAll>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAll>>, TError,void, TContext> => {

const mutationKey = ['deleteAll'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAll>>, void> = () => {
          

          return  deleteAll()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAllMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAll>>>
    
    export type DeleteAllMutationError = unknown

    export const useDeleteAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAll>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAll>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteAllMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getHello = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getGetHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getGetHelloInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getHello>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHello>>> = ({ signal }) => getHello(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHelloInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHello>>>
export type GetHelloInfiniteQueryError = unknown


export function useGetHelloInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHello>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHello>>,
          TError,
          Awaited<ReturnType<typeof getHello>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHelloInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHello>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHello>>,
          TError,
          Awaited<ReturnType<typeof getHello>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHelloInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHello>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetHelloInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHello>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHelloInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHello>>> = ({ signal }) => getHello(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof getHello>>>
export type GetHelloQueryError = unknown


export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHello>>,
          TError,
          Awaited<ReturnType<typeof getHello>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHello>>,
          TError,
          Awaited<ReturnType<typeof getHello>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHelloQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




