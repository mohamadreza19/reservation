/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Appointment
} from '.././models';


export const getAppointmentsGetAllResponseMock = (): Appointment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({customer: {id: faker.string.alpha(20), userInfo: {...{phoneNumber: faker.string.alpha(20), password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['super_admin','business_admin','employee','customer'] as const), userName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), firstName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastName: faker.helpers.arrayElement([faker.string.alpha(20), undefined])},}}, service: {id: faker.string.alpha(20), name: faker.string.alpha(20), icon: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), isSystemService: faker.datatype.boolean(), price: faker.helpers.arrayElement([{id: faker.string.alpha(20), amount: faker.string.alpha(20)}, undefined]), children: faker.helpers.arrayElement([[], undefined])}, timeslot: {id: faker.string.alpha(20), date: faker.string.alpha(20), startTime: faker.string.alpha(20), endTime: faker.string.alpha(20), isAvailable: faker.datatype.boolean()}, business: {id: faker.string.alpha(20), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), address: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), userInfo: {phoneNumber: faker.string.alpha(20), password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement(['super_admin','business_admin','employee','customer'] as const), userName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), firstName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastName: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}})))


export const getAppointmentsCreateMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/appointments', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getAppointmentsGetAllMockHandler = (overrideResponse?: Appointment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Appointment[]> | Appointment[])) => {
  return http.get('*/appointments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAppointmentsGetAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAppointmentMock = () => [
  getAppointmentsCreateMockHandler(),
  getAppointmentsGetAllMockHandler()
]
